--- solana/rpc/api.py	2021-05-21 15:39:04.888747442 +0300
+++ solana/rpc/api.py	2021-05-21 17:54:15.422117130 +0300
@@ -14,7 +14,7 @@
 from solana.publickey import PublicKey
 from solana.transaction import Transaction
 
-from .commitment import Commitment, Max
+from .commitment import Commitment, Max, Confirmed
 from .providers import http
 
 
@@ -33,6 +33,11 @@
     return types.MemcmpOpts(*args, **kwargs)
 
 
+class SendTransactionError(Exception):
+    def __init__(self, result):
+        super().__init__(result['message'])
+        self.result=result
+
 class Client:  # pylint: disable=too-many-public-methods
     """Client class."""
 
@@ -55,7 +60,7 @@
         """
         return self._provider.is_connected()
 
-    def get_balance(self, pubkey: Union[PublicKey, str], commitment: Commitment = Max) -> types.RPCResponse:
+    def get_balance(self, pubkey: Union[PublicKey, str], commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns the balance of the account of provided Pubkey.
 
         :param pubkey: Pubkey of account to query, as base-58 encoded string or PublicKey object.
@@ -71,7 +76,7 @@
     def get_account_info(
         self,
         pubkey: Union[PublicKey, str],
-        commitment: Commitment = Max,
+        commitment: Commitment = Confirmed,
         encoding: str = "base64",
         data_slice: Optional[types.DataSliceOpts] = None,
     ) -> types.RPCResponse:
@@ -284,7 +289,7 @@
 
         return self._provider.make_request(types.RPCMethod("getConfirmedSignaturesForAddress2"), account, opts)
 
-    def get_confirmed_transaction(self, tx_sig: str, encoding: str = "json") -> types.RPCResponse:
+    def get_confirmed_transaction(self, tx_sig: str, encoding: str = "json", commitment : Commitment = Confirmed) -> types.RPCResponse:
         """Returns transaction details for a confirmed transaction.
 
         :param tx_sig: Transaction signature as base-58 encoded string N encoding attempts to use program-specific
@@ -315,9 +320,9 @@
            'signatures': ['3PtGYH77LhhQqTXP4SmDVJ85hmDieWsgXCUbn14v7gYyVYPjZzygUQhTk3bSTYnfA48vCM1rmWY7zWL3j1EVKmEy']}},
          'id': 4}
         """  # noqa: E501 # pylint: disable=line-too-long
-        return self._provider.make_request(types.RPCMethod("getConfirmedTransaction"), tx_sig, encoding)
+        return self._provider.make_request(types.RPCMethod("getConfirmedTransaction"), tx_sig, {self._comm_key: commitment, self._encoding_key: encoding})
 
-    def get_epoch_info(self, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_epoch_info(self, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns information about the current epoch.
 
         :param commitment: Bank state to query. It can be either "max", "root", "single" or "recent".
@@ -350,7 +355,7 @@
         return self._provider.make_request(types.RPCMethod("getEpochSchedule"))
 
     def get_fee_calculator_for_blockhash(
-        self, blockhash: Union[str, Blockhash], commitment: Commitment = Max
+        self, blockhash: Union[str, Blockhash], commitment: Commitment = Confirmed
     ) -> types.RPCResponse:
         """Returns the fee calculator associated with the query blockhash, or null if the blockhash has expired.
 
@@ -384,7 +389,7 @@
         """
         return self._provider.make_request(types.RPCMethod("getFeeRateGovernor"))
 
-    def get_fees(self, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_fees(self, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns a recent block hash from the ledger, a fee schedule and the last slot the blockhash will be valid.
 
         :param commitment: Bank state to query. It can be either "max", "root", "single" or "recent".
@@ -431,7 +436,7 @@
         """
         return self._provider.make_request(types.RPCMethod("getIdentity"))
 
-    def get_inflation_governor(self, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_inflation_governor(self, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns the current inflation governor.
 
         :param commitment: Bank state to query. It can be either "max", "root", "single" or "recent".
@@ -462,7 +467,7 @@
         """
         return self._provider.make_request(types.RPCMethod("getInflationRate"))
 
-    def get_largest_accounts(self, filter_opt: Optional[str] = None, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_largest_accounts(self, filter_opt: Optional[str] = None, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns the 20 largest accounts, by lamport balance.
 
         :param opt: Filter results by account type; currently supported: circulating|nonCirculating.
@@ -518,7 +523,7 @@
         opt[self._comm_key] = str(commitment)
         return self._provider.make_request(types.RPCMethod("getLargestAccounts"), opt)
 
-    def get_leader_schedule(self, epoch: Optional[int] = None, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_leader_schedule(self, epoch: Optional[int] = None, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns the leader schedule for an epoch.
 
         :param epoch: Fetch the leader schedule for the epoch that corresponds to the provided slot.
@@ -539,7 +544,7 @@
         """
         return self._provider.make_request(types.RPCMethod("getLeaderSchedule"), epoch, {self._comm_key: commitment})
 
-    def get_minimum_balance_for_rent_exemption(self, usize: int, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_minimum_balance_for_rent_exemption(self, usize: int, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns minimum balance required to make account rent exempt.
 
         :param usize: Account data length.
@@ -556,7 +561,7 @@
     def get_program_accounts(  # pylint: disable=too-many-arguments
         self,
         pubkey: Union[str, PublicKey],
-        commitment: Commitment = Max,
+        commitment: Commitment = Confirmed,
         encoding: Optional[str] = None,
         data_slice: Optional[types.DataSliceOpts] = None,
         data_size: Optional[int] = None,
@@ -602,7 +607,7 @@
 
         return self._provider.make_request(types.RPCMethod("getProgramAccounts"), str(pubkey), opts)
 
-    def get_recent_blockhash(self, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_recent_blockhash(self, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns a recent block hash from the ledger.
 
         Response also includes a fee schedule that can be used to compute the cost
@@ -661,7 +666,7 @@
             {"searchTransactionHistory": search_transaction_history},
         )
 
-    def get_slot(self, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_slot(self, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns the current slot the node is processing.
 
         :param commitment: Bank state to query. It can be either "max", "root", "single" or "recent".
@@ -672,7 +677,7 @@
         """
         return self._provider.make_request(types.RPCMethod("getSlot"), {self._comm_key: commitment})
 
-    def get_slot_leader(self, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_slot_leader(self, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns the current slot leader.
 
         :param commitment: Bank state to query. It can be either "max", "root", "single" or "recent".
@@ -686,7 +691,7 @@
         return self._provider.make_request(types.RPCMethod("getSlotLeader"), {self._comm_key: commitment})
 
     def get_stake_activation(
-        self, pubkey: Union[PublicKey, str], epoch: Optional[int] = None, commitment: Commitment = Max
+        self, pubkey: Union[PublicKey, str], epoch: Optional[int] = None, commitment: Commitment = Confirmed
     ):
         """Returns epoch activation information for a stake account.
 
@@ -705,7 +710,7 @@
 
         return self._provider.make_request(types.RPCMethod("getStakeActivation"), str(pubkey), opts)
 
-    def get_supply(self, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_supply(self, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns information about the current supply.
 
         :param commitment: Bank state to query. It can be either "max", "root", "single" or "recent".
@@ -726,7 +731,7 @@
         """
         return self._provider.make_request(types.RPCMethod("getSupply"), {self._comm_key: commitment})
 
-    def get_token_account_balance(self, pubkey: Union[str, PublicKey], commitment: Commitment = Max):
+    def get_token_account_balance(self, pubkey: Union[str, PublicKey], commitment: Commitment = Confirmed):
         """Returns the token balance of an SPL Token account (UNSTABLE).
 
         :param pubkey: Pubkey of Token account to query, as base-58 encoded string or PublicKey object.
@@ -750,7 +755,7 @@
         self,
         delegate: PublicKey,
         opts: types.TokenAccountOpts,
-        commitment: Commitment = Max,
+        commitment: Commitment = Confirmed,
     ) -> types.RPCResponse:
         """Returns all SPL Token accounts by approved Delegate (UNSTABLE).
 
@@ -764,7 +769,7 @@
         self,
         owner: PublicKey,
         opts: types.TokenAccountOpts,
-        commitment: Commitment = Max,
+        commitment: Commitment = Confirmed,
     ) -> types.RPCResponse:
         """Returns all SPL Token accounts by token owner (UNSTABLE).
 
@@ -804,7 +809,7 @@
         """Returns the total supply of an SPL Token type(UNSTABLE)."""
         raise NotImplementedError("get_token_supply not implemented")
 
-    def get_transaction_count(self, commitment: Commitment = Max) -> types.RPCResponse:
+    def get_transaction_count(self, commitment: Commitment = Confirmed) -> types.RPCResponse:
         """Returns the current Transaction count from the ledger.
 
         :param commitment: Bank state to query. It can be either "max", "root", "single" or "recent".
@@ -835,7 +840,7 @@
         """
         return self._provider.make_request(types.RPCMethod("getVersion"))
 
-    def get_vote_accounts(self, commitment: Commitment = Max):
+    def get_vote_accounts(self, commitment: Commitment = Confirmed):
         """Returns the account info and associated stake for all the voting accounts in the current bank.
 
         :param commitment: Bank state to query. It can be either "max", "root", "single" or "recent".
@@ -881,7 +886,7 @@
         return self._provider.make_request(types.RPCMethod("getVoteAccounts"), {self._comm_key: commitment})
 
     def request_airdrop(
-        self, pubkey: Union[PublicKey, str], lamports: int, commitment: Commitment = Max
+        self, pubkey: Union[PublicKey, str], lamports: int, commitment: Commitment = Confirmed
     ) -> types.RPCResponse:
         """Requests an airdrop of lamports to a Pubkey.
 
@@ -973,7 +978,7 @@
         return self.send_raw_transaction(txn.serialize(), opts=opts)
 
     def simulate_transaction(
-        self, txn: Union[bytes, str, Transaction], sig_verify: bool = False, commitment: Commitment = Max
+        self, txn: Union[bytes, str, Transaction], sig_verify: bool = False, commitment: Commitment = Confirmed
     ) -> types.RPCResponse:
         """Simulate sending a transaction.
 
@@ -1039,6 +1044,7 @@
     def __post_send(self, resp: types.RPCResponse, skip_confirm: bool, conf_comm: Commitment) -> types.RPCResponse:
         if resp.get("error"):
             self._provider.logger.error(resp.get("error"))
+            raise SendTransactionError(resp.get("error"))
         if not resp.get("result"):
             raise Exception("Failed to send transaction")
         if skip_confirm:
@@ -1050,7 +1056,7 @@
 
         return self.__confirm_transaction(resp["result"], conf_comm)
 
-    def __confirm_transaction(self, tx_sig: str, commitment: Commitment = Max) -> types.RPCResponse:
+    def __confirm_transaction(self, tx_sig: str, commitment: Commitment = Confirmed) -> types.RPCResponse:
         # TODO: Use websockets and check confirmation with onSignature subscription.
         TIMEOUT = 30  # 30 seconds  pylint: disable=invalid-name
         elapsed_time = 0
